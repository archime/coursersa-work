# Submission for "Pong" in "Introduction to Interactive Programming in Python (Part 1)"
# Cliff Nelson
# August 2, 2018

# Implementation of classic arcade game Pong
import simplegui
import random

# Initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
LEFT = False
RIGHT = True

# Initializes ball in middle with random velocity
# If direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    modifier = -1
    if direction:
        modifier = 1
    ball_vel = [modifier * random.randrange(120/60, 240/60), -random.randrange(60/60, 180/60)]

# Define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, paddle1_score, paddle2_score  # these are ints
    paddle1_pos = [0, HEIGHT / 2 - PAD_HEIGHT/2]
    paddle2_pos = [WIDTH - PAD_WIDTH, HEIGHT / 2 - PAD_HEIGHT / 2]
    paddle1_vel = 0
    paddle2_vel = 0
    paddle1_score = 0
    paddle2_score = 0
    spawn_ball(RIGHT)

def draw(canvas):
    global paddle1_score, paddle2_score, paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, ball_pos, ball_vel
 
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # bounce ball off top and bottom of frame
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = -1 * ball_vel[1]
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "White", "White")
    
    # update paddle's vertical position, keep paddle on the screen  
    if (paddle1_pos[1] >= 0 and paddle1_vel < 0) or (paddle1_pos[1] <= HEIGHT - PAD_HEIGHT and paddle1_vel > 0):
        paddle1_pos[1] += paddle1_vel
        
    if (paddle2_pos[1] >= 0 and paddle2_vel < 0) or (paddle2_pos[1] <= HEIGHT - PAD_HEIGHT and paddle2_vel > 0):
        paddle2_pos[1] += paddle2_vel
    
    # draw paddles
    canvas.draw_polygon([(paddle1_pos[0], paddle1_pos[1]),
                         (paddle1_pos[0], paddle1_pos[1] + PAD_HEIGHT),
                         (paddle1_pos[0] + PAD_WIDTH, paddle1_pos[1] + PAD_HEIGHT),
                         (paddle1_pos[0] + PAD_WIDTH, paddle1_pos[1])], 1, 'Green', 'Green')
    
    canvas.draw_polygon([(paddle2_pos[0], paddle2_pos[1]),
                         (paddle2_pos[0], paddle2_pos[1] + PAD_HEIGHT),
                         (paddle2_pos[0] + PAD_WIDTH, paddle2_pos[1] + PAD_HEIGHT),
                         (paddle2_pos[0] + PAD_WIDTH, paddle2_pos[1])], 1, 'Red', 'Red')
    
    # determine whether paddle and ball collide    
    if ball_pos[0] <= BALL_RADIUS + PAD_WIDTH:
        if (ball_pos[1] >= paddle1_pos[1]) and (ball_pos[1] <= paddle1_pos[1] + PAD_HEIGHT):
            ball_vel[0] = -ball_vel[0]*1.1
        else:
            spawn_ball(RIGHT)
            paddle2_score +=1
    elif ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH:
        if (ball_pos[1] >= paddle2_pos[1]) and (ball_pos[1] <= paddle2_pos[1] + PAD_HEIGHT):
            ball_vel[0] = -ball_vel[0]*1.1
        else:
            spawn_ball(LEFT) 
            paddle1_score +=1
    
    # draw scores
    score_width = frame.get_canvas_textwidth(str(paddle1_score), 40)
    canvas.draw_text(str(paddle1_score), ((WIDTH / 2) - score_width - 50, 60), 40, 'White')
    canvas.draw_text(str(paddle2_score), ((WIDTH / 2) + 50, 60), 40, 'White')
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -2
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 2
    elif key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -2
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 2
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if (key == simplegui.KEY_MAP["up"]) or (key == simplegui.KEY_MAP["down"]):
        paddle2_vel = 0
    elif (key == simplegui.KEY_MAP["w"]) or (key == simplegui.KEY_MAP["s"]):
        paddle1_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button('New Game', new_game, 200)

# start frame
new_game()
frame.start()
