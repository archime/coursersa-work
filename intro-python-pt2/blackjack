# Submission for "Blackjack" in "Introduction to Interactive Programming in Python (Part 2)"
# Cliff Nelson
# August 18, 2018

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
deck = []

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.cards = []

    def __str__(self):
        ans = ""
        for i in range(len(self.cards)):
            card = self.cards[i]
            ans += card.get_suit() + card.get_rank() + " "
        return "Hand contains " + ans

    def add_card(self, card):
        self.cards.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        value = 0
        has_ace = False
        for card in self.cards:
            value += VALUES[card.get_rank()]
            if card.get_rank() == "A":
                has_ace = True
        if has_ace and (value + 10 <= 21):
            value += 10
        return value
   
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        shift = 0
        for card in self.cards:
            card.draw(canvas, (pos[0] + shift, pos[1]))
            shift += 85

# define deck class 
class Deck:
    def __init__(self):
        self.cards = []
        for suit in SUITS:
            for rank in RANKS:
                card = Card(suit, rank)
                self.cards.append(card)

    def shuffle(self):
        random.shuffle(self.cards)

    def deal_card(self):
        return self.cards.pop()	# deal a card object from the deck
    
    def __str__(self):
        output = 'Deck contains '
        for card in self.cards:
            output += str(card) + " "
        return output	# return a string representing the deck

#define event handlers for buttons
def deal():
    global outcome, score, in_play, deck, dealer_hand, player_hand
    
    if in_play:
        outcome = "Player gave up... new deal!"
        score  -= 1
        in_play = False
    else:
        outcome = "Hit or stand?"
        in_play = True
        deck = Deck()
        dealer_hand = Hand()
        player_hand = Hand()
    
        # Shuffle global deck and create dealer, player hands
        deck.shuffle()
        dealer_hand.add_card(deck.deal_card())
        dealer_hand.add_card(deck.deal_card())
        player_hand.add_card(deck.deal_card())
        player_hand.add_card(deck.deal_card())

def hit():
    global in_play, score, outcome
 
    # if the hand is in play, hit the player
    if in_play:
        player_hand.add_card(deck.deal_card())
        
        # if busted, assign a message to outcome, update in_play and score
        if player_hand.get_value() > 21:
            outcome = "Player busts, ha!"
            in_play = False
            score -= 1
        else:
            outcome = "Hit again?"
    else:
        outcome = "New deal?"

def stand():
    global in_play, score, outcome
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play:
        while dealer_hand.get_value() < 17:
            dealer_hand.add_card(deck.deal_card())
        
        # assign a message to outcome, update in_play and score
        if dealer_hand.get_value() > 21:
            outcome = "Dealer busts :-)"
            score += 1
        elif dealer_hand.get_value() > player_hand.get_value():
            outcome = "Dealer wins, ha!"
            score -= 1
        elif dealer_hand.get_value() == player_hand.get_value():
            outcome = "Tie goes to the dealer, ouch!"
            score -= 1
        else:
            outcome = "Player wins!!!!!"
            score += 1
    
        in_play = False  
    else:
        outcome = "New deal?"

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("Blackjack", (200, 60), 50, 'Purple')
    canvas.draw_text("Score: " + str(score), (200, 120), 50, 'Purple')
    
    canvas.draw_text("Dealer", (20, 180), 50, 'Red')
    dealer_hand.draw(canvas, [20, 200])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, (20 + CARD_CENTER[0], 200 + CARD_CENTER[1]), CARD_SIZE)
    
    canvas.draw_text("Player", (20, 360), 50, 'Blue')
    player_hand.draw(canvas, [20, 380])
    
    canvas.draw_text(outcome, (20, 540), 50, 'Purple')

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling
deal()
frame.start()
