"""
Loyd's Fifteen puzzle - solver and visualizer
Note that solved configuration has the blank (zero) tile in upper left
Use the arrows key to swap this tile with its neighbors
"""

import poc_fifteen_gui
import poc_simpletest

class Puzzle:
    """
    Class representation for the Fifteen puzzle
    """

    def __init__(self, puzzle_height, puzzle_width, initial_grid=None):
        """
        Initialize puzzle with default height and width
        Returns a Puzzle object
        """
        self._height = puzzle_height
        self._width = puzzle_width
        self._grid = [[col + puzzle_width * row
                       for col in range(self._width)]
                      for row in range(self._height)]
        
        # List of tuples that include grid positions and value if solved
        self._solved_positions = []
        solved_value = 0
        for row in range(puzzle_height):
            row_list = []
            for col in range(puzzle_width):
                row_list.append(solved_value)
                solved_value += 1
            self._solved_positions.append(row_list)
        
        # Populates initial grid if provided
        if initial_grid != None:
            for row in range(puzzle_height):
                for col in range(puzzle_width):
                    self._grid[row][col] = initial_grid[row][col]
    
    def __str__(self):
        """
        Generate string representaion for puzzle
        Returns a string
        """
        ans = ""
        for row in range(self._height):
            ans += str(self._grid[row])
            ans += "\n"
        return ans

    #####################################
    # GUI methods

    def get_height(self):
        """
        Getter for puzzle height
        Returns an integer
        """
        return self._height

    def get_width(self):
        """
        Getter for puzzle width
        Returns an integer
        """
        return self._width

    def get_number(self, row, col):
        """
        Getter for the number at tile position pos
        Returns an integer
        """
        return self._grid[row][col]

    def set_number(self, row, col, value):
        """
        Setter for the number at tile position pos
        """
        self._grid[row][col] = value

    def clone(self):
        """
        Make a copy of the puzzle to update during solving
        Returns a Puzzle object
        """
        new_puzzle = Puzzle(self._height, self._width, self._grid)
        return new_puzzle

    ########################################################
    # Core puzzle methods

    def current_position(self, solved_row, solved_col):
        """
        Locate the current position of the tile that will be at
        position (solved_row, solved_col) when the puzzle is solved
        Returns a tuple of two integers        
        """
        solved_value = (solved_col + self._width * solved_row)

        for row in range(self._height):
            for col in range(self._width):
                if self._grid[row][col] == solved_value:
                    return (row, col)
        assert False, "Value " + str(solved_value) + " not found"

    def update_puzzle(self, move_string):
        """
        Updates the puzzle state based on the provided move string
        """
        zero_row, zero_col = self.current_position(0, 0)
        for direction in move_string:
            if direction == "l":
                assert zero_col > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col - 1]
                self._grid[zero_row][zero_col - 1] = 0
                zero_col -= 1
            elif direction == "r":
                assert zero_col < self._width - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row][zero_col + 1]
                self._grid[zero_row][zero_col + 1] = 0
                zero_col += 1
            elif direction == "u":
                assert zero_row > 0, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row - 1][zero_col]
                self._grid[zero_row - 1][zero_col] = 0
                zero_row -= 1
            elif direction == "d":
                assert zero_row < self._height - 1, "move off grid: " + direction
                self._grid[zero_row][zero_col] = self._grid[zero_row + 1][zero_col]
                self._grid[zero_row + 1][zero_col] = 0
                zero_row += 1
            else:
                assert False, "invalid direction: " + direction
    
    ##################################################################
    # Helper functions
    
    def is_solved_position(self, grid_row, grid_col):
        """
        Check whether the tile at the given position is in the solved position
        Returns a boolean
        """
        if self.get_number(grid_row, grid_col) == self._solved_positions[grid_row][grid_col]:
            return True
        return False
    
    def find_target_tile(self, grid_row, grid_col):
        """
        Returns location of tile that belongs in current_row, current_col when solved
        """
        target_tile = self._solved_positions[grid_row][grid_col]
        for ridx, row in enumerate(self._grid):
            for cidx, value in enumerate(row):
                if value == target_tile:
                    return (ridx, cidx)
    
    ##################################################################
    # Phase one methods

    def lower_row_invariant(self, target_row, target_col):
        """
        Check whether the puzzle satisfies the specified invariant
        at the given position in the bottom rows of the puzzle (target_row > 1)
        Returns a boolean
        """
        invariant = True
        # Condition 1
        if self.get_number(target_row, target_col) != 0:
            invariant = False
        
        # Condition 2
        for row in range(target_row + 1, self._height):
            for col in range(self._width):
                if not self.is_solved_position(row, col):
                    invariant = False
        
        # Condition 3
        for col in range(target_col + 1, self._width):
            if not self.is_solved_position(target_row, col):
                invariant = False
        
        return invariant

    def solve_interior_tile(self, target_row, target_col):
        """
        Place correct tile at target position
        Updates puzzle and returns a move string
        """
        assert target_row > 1
        assert target_col > 0
        assert self.lower_row_invariant(target_row, target_col)
        
        target_location = self.find_target_tile(target_row, target_col)
        move_string = ""
        
        if target_location[0] == target_row:
            move_string += "l" * (target_col - target_location[1])
            move_string += "urrdl" * (target_col - target_location[1] - 1)
        elif target_location[1] == target_col:
            move_string += "u" * (target_row - target_location[0])
            move_string += "lddru" * (target_row - target_location[0] - 1)
            move_string += "ld"
        elif target_location[1] < target_col:
            move_string += "l" * (target_col - target_location[1])
            move_string += "u" * (target_row - target_location[0])
            move_string += "rddlu" * (target_row - target_location[0] - 1)
            move_string += "rdl"
            move_string += "urrdl" * (target_col - target_location[1] - 1)
        elif target_location[1] > target_col:
            move_string += "u" * (target_row - target_location[0])
            move_string += "r" * (target_location[1] - target_col)
            move_string += "dllur" * (target_location[1] - target_col - 1)
            move_string += "dlu"
            move_string += "lddru" * (target_row - target_location[0] - 1)
            move_string += "ld"
        
        self.update_puzzle(move_string)
        
        assert self.lower_row_invariant(target_row, target_col - 1)
        
        return move_string

    def solve_col0_tile(self, target_row):
        """
        Solve tile in column zero on specified row (> 1)
        Updates puzzle and returns a move string
        """
        # replace with your code
        return ""

    #############################################################
    # Phase two methods

    def row0_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row zero invariant
        at the given column (col > 1)
        Returns a boolean
        """
        # replace with your code
        return False

    def row1_invariant(self, target_col):
        """
        Check whether the puzzle satisfies the row one invariant
        at the given column (col > 1)
        Returns a boolean
        """
        # replace with your code
        return False

    def solve_row0_tile(self, target_col):
        """
        Solve the tile in row zero at the specified column
        Updates puzzle and returns a move string
        """
        # replace with your code
        return ""

    def solve_row1_tile(self, target_col):
        """
        Solve the tile in row one at the specified column
        Updates puzzle and returns a move string
        """
        # replace with your code
        return ""

    ###########################################################
    # Phase 3 methods

    def solve_2x2(self):
        """
        Solve the upper left 2x2 part of the puzzle
        Updates the puzzle and returns a move string
        """
        # replace with your code
        return ""

    def solve_puzzle(self):
        """
        Generate a solution string for a puzzle
        Updates the puzzle and returns a move string
        """
        # replace with your code
        return ""

# Start tests
test_suite = poc_simpletest.TestSuite()

# Test: is_solved_position
test_isp_puzzle = Puzzle(4, 4, [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 11, 10], [12, 13, 14, 15]])
test_suite.run_test(test_isp_puzzle.is_solved_position(0, 3), True, "is_solved_position, Test 1:")
test_suite.run_test(test_isp_puzzle.is_solved_position(3, 3), True, "is_solved_position, Test 2:")
test_suite.run_test(test_isp_puzzle.is_solved_position(2, 2), False, "is_solved_position, Test 3:")

# Test: find_target_tile
test_ftt_puzzle = Puzzle(4, 4, [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 11, 10], [12, 13, 14, 15]])
test_suite.run_test(test_ftt_puzzle.find_target_tile(2, 2), (2, 3), "find_target_tile, Test 1:")
test_suite.run_test(test_ftt_puzzle.find_target_tile(0, 2), (0, 2), "find_target_tile, Test 1:")

# Test: lower_row_invariant
test_lri_puzzle1 = Puzzle(3, 3, [[4, 1, 2], [3, 0, 5], [6, 7, 8]]) # Condition 1
test_lri_puzzle2 = Puzzle(3, 3, [[4, 7, 2], [3, 0, 5], [6, 1, 8]]) # Condition 2
test_lri_puzzle3 = Puzzle(3, 3, [[4, 1, 5], [3, 0, 2], [6, 7, 8]]) # Condition 3
test_suite.run_test(test_lri_puzzle1.lower_row_invariant(1, 1), True, "lower_row_invariant, Test 1:")
test_suite.run_test(test_lri_puzzle2.lower_row_invariant(1, 1), False, "lower_row_invariant, Test 2:")
test_suite.run_test(test_lri_puzzle3.lower_row_invariant(1, 1), False, "lower_row_invariant, Test 3:")

# Test: solve_interior_tile
test_sit_puzzle1 = Puzzle(4, 4, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 13, 1, 1], [1, 0, 14, 15]])
test_sit_puzzle2 = Puzzle(4, 4, [[1, 13, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 14, 15]])
test_sit_puzzle3 = Puzzle(4, 4, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [15, 1, 1, 0]])
test_sit_puzzle4 = Puzzle(4, 4, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 15, 0]])
test_sit_puzzle5 = Puzzle(4, 4, [[1, 1, 1, 1], [1, 1, 1, 1], [1, 14, 1, 1], [1, 1, 0, 15]])
test_sit_puzzle6 = Puzzle(4, 4, [[14, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 0, 15]])
test_sit_puzzle7 = Puzzle(4, 4, [[1, 1, 1, 13], [1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 14, 15]])
test_suite.run_test(test_sit_puzzle1.solve_interior_tile(3, 1), "uld", "solve_interior_puzzle, Test 1:")
test_suite.run_test(test_sit_puzzle2.solve_interior_tile(3, 1), "uuulddrulddruld", "solve_interior_puzzle, Test 2:")
test_suite.run_test(test_sit_puzzle3.solve_interior_tile(3, 3), "lllurrdlurrdl", "solve_interior_puzzle, Test 3:")
test_suite.run_test(test_sit_puzzle4.solve_interior_tile(3, 3), "l", "solve_interior_puzzle, Test 4:")
test_suite.run_test(test_sit_puzzle5.solve_interior_tile(3, 2), "lurdl", "solve_interior_puzzle, Test 5:")
test_suite.run_test(test_sit_puzzle6.solve_interior_tile(3, 2), "lluuurddlurddlurdlurrdl", "solve_interior_puzzle, Test 6:")
test_suite.run_test(test_sit_puzzle7.solve_interior_tile(3, 1), "uuurrdllurdlulddrulddruld", "solve_interior_puzzle, Test 7:")

# Test Results
test_suite.report_results()

# Start interactive simulation
puzzle = Puzzle(4, 4)
poc_fifteen_gui.FifteenGUI(puzzle)
