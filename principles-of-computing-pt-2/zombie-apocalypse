"""
Submission for "Zombie Apocalypse" 
in "Principles of Computing (Part 2)"
Cliff Nelson
Created September 10, 2018
"""

import random
import poc_grid
import poc_queue
import poc_zombie_gui

# global constants
HUMAN = 6
ZOMBIE = 7

class Apocalypse(poc_grid.Grid):
    """
    Class for simulating zombie pursuit of human on grid with
    obstacles
    """

    def __init__(self, grid_height, grid_width, obstacle_list = None, 
                 zombie_list = None, human_list = None):
        """
        Create a simulation of given size with given obstacles,
        humans, and zombies
        """
        poc_grid.Grid.__init__(self, grid_height, grid_width)
        if obstacle_list != None:
            for cell in obstacle_list:
                self.set_full(cell[0], cell[1])
        if zombie_list != None:
            self._zombie_list = list(zombie_list)
        else:
            self._zombie_list = []
        if human_list != None:
            self._human_list = list(human_list)  
        else:
            self._human_list = []
        
    def clear(self):
        """
        Set cells in obstacle grid to be empty
        Reset zombie and human lists to be empty
        """
        poc_grid.Grid.clear(self)
        self._zombie_list = []
        self._human_list = []
        
    def add_zombie(self, row, col):
        """
        Add zombie to the zombie list
        """
        self._zombie_list.append((row, col))
                
    def num_zombies(self):
        """
        Return number of zombies
        """
        return len(self._zombie_list)     
          
    def zombies(self):
        """
        Generator that yields the zombies in the order they were
        added.
        """
        for zombie in self._zombie_list:
            yield zombie

    def add_human(self, row, col):
        """
        Add human to the human list
        """
        self._human_list.append((row, col))
        
    def num_humans(self):
        """
        Return number of humans
        """
        return len(self._human_list)
    
    def humans(self):
        """
        Generator that yields the humans in the order they were added.
        """
        # replace with an actual generator
        for human in self._human_list:
            yield human
        
    def compute_distance_field(self, entity_type):
        """
        Function computes and returns a 2D distance field
        Distance at member of entity_list is zero
        Shortest paths avoid obstacles and use four-way distances
        """
        grid_height = poc_grid.Grid.get_grid_height(self)
        grid_width = poc_grid.Grid.get_grid_width(self)
        visited = poc_grid.Grid(grid_height, grid_width)
        distance_field = [[grid_height * grid_width for dummy_idx in range(grid_width)] for dummy_idx in range(grid_height)]
        
        if entity_type == HUMAN:
            entity_list = self._human_list
        elif entity_type == ZOMBIE:
            entity_list = self._zombie_list
        
        boundary_queue = poc_queue.Queue()
        
        for entity in entity_list:
            boundary_queue.enqueue(entity)
            visited.set_full(entity[0], entity[1])
            distance_field[entity[0]][entity[1]] = 0
        
        while len(boundary_queue) != 0:
            current_cell = boundary_queue.dequeue()
            for neighbor_cell in visited.four_neighbors(current_cell[0], current_cell[1]):
                if visited.is_empty(neighbor_cell[0], neighbor_cell[1]):
                    if poc_grid.Grid.is_empty(self, neighbor_cell[0], neighbor_cell[1]):
                        visited.set_full(neighbor_cell[0], neighbor_cell[1])
                        boundary_queue.enqueue(neighbor_cell)
                        distance_field[neighbor_cell[0]][neighbor_cell[1]] = distance_field[current_cell[0]][current_cell[1]] + 1
        
        return distance_field
    
    def move_humans(self, zombie_distance_field):
        """
        Function that moves humans away from zombies, diagonal moves
        are allowed
        """
        for human_num in range(len(self._human_list)):
            human = self._human_list[human_num]
            
            # Init lists with coordinates of human, distance
            coordinates = [(human[0], human[1])]
            distances = [zombie_distance_field[human[0]][human[1]]]
            
            # Iterate through 8-side neighbors and add coord, distance to list if empty
            for neighbor_cell in poc_grid.Grid.eight_neighbors(self, human[0], human[1]):
                if poc_grid.Grid.is_empty(self, neighbor_cell[0], neighbor_cell[1]):
                    coordinates.append(neighbor_cell)
                    distances.append(zombie_distance_field[neighbor_cell[0]][neighbor_cell[1]])
            
            # Iterate through list to build list of coords with max distance
            max_dist = 0
            max_dist_coords = []
            for idx in range(len(distances)):
                if distances[idx] == max_dist:
                    max_dist_coords.append(coordinates[idx])
                elif distances[idx] > max_dist:
                    max_dist = distances[idx]
                    max_dist_coords = [coordinates[idx]]
                    
            # Select random from list of max dist
            move_dest = random.choice(max_dist_coords)
            
            # Move human to selected cell
            self._human_list[human_num] = move_dest
    
    def move_zombies(self, human_distance_field):
        """
        Function that moves zombies towards humans, no diagonal moves
        are allowed
        """
        for zombie_num in range(len(self._zombie_list)):
            zombie = self._zombie_list[zombie_num]
            
            # Init lists with coordinates of human, distance
            coordinates = [(zombie[0], zombie[1])]
            distances = [human_distance_field[zombie[0]][zombie[1]]]
            
            # Iterate through 4-side neighbors and add coord, distance to list if empty
            for neighbor_cell in poc_grid.Grid.four_neighbors(self, zombie[0], zombie[1]):
                if poc_grid.Grid.is_empty(self, neighbor_cell[0], neighbor_cell[1]):
                    coordinates.append(neighbor_cell)
                    distances.append(human_distance_field[neighbor_cell[0]][neighbor_cell[1]])
            
            # Iterate through list to build list of coords with min distance
            min_dist = poc_grid.Grid.get_grid_height(self) * poc_grid.Grid.get_grid_width(self)
            min_dist_coords = []
            for idx in range(len(distances)):
                if distances[idx] == min_dist:
                    min_dist_coords.append(coordinates[idx])
                elif distances[idx] < min_dist:
                    min_dist = distances[idx]
                    min_dist_coords = [coordinates[idx]]
                    
            # Select random from list of max dist
            move_dest = random.choice(min_dist_coords)
            
            # Move zombie to selected cell
            self._zombie_list[zombie_num] = move_dest

# Start up gui for simulation - You will need to write some code above
# before this will work without errors

poc_zombie_gui.run_gui(Apocalypse(30, 40))
