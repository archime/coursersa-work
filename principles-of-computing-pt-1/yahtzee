"""
Submission for "Yahtzee" 
in "Principles of Computing (Part 1)"
Cliff Nelson
Created September 8, 2018
"""

import codeskulptor

# Used to increase the timeout, if necessary
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """ 
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set

def score(hand):
    """
    Return max score (integer) for a Yahtzee hand according to the
    upper section of the Yahtzee score card.
    """
    # Create list of unique die values in hand
    unique_values = []
    for die in hand:
        if die not in unique_values:
            unique_values.append(die)
    
    # Score is max subtotal of dice for each unique die value
    score_result = 0
    for value in unique_values:
        score_result = max(score_result, hand.count(value) * value)
    return score_result

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    # List all possible rolls given num_die_sides, num_free_dice
    poss_rolls = gen_all_sequences(range(1, num_die_sides + 1), num_free_dice)
    
    # Compute total scores for all poss_rolls and return average
    total_score = 0.0
    for roll in poss_rolls:
        total_score += score(held_dice + roll)
    return total_score / len(poss_rolls)

def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold and
    returns a set of tuples, where each tuple is dice to hold
    """
    all_holds = set([()])
    for tf_sequence in gen_all_sequences((True, False), len(hand)):
        this_hold = []
        for idx in range(len(hand)):
            if tf_sequence[idx]:
                this_hold.append(hand[idx])
        this_hold.sort()
        this_hold = tuple(this_hold)
        all_holds.add(this_hold)         
    return all_holds

def strategy(hand, num_die_sides):
    """
    Given hand and num_die_sides, compute the hold that maximizes the expected 
    value when the discarded dice are rolled. Returns tuple of expected score and
    dice to hold.
    """
    all_holds = gen_all_holds(hand)
    max_exp_value = 0.0
    best_hold = ()
    for hold in all_holds:
        if expected_value(hold, num_die_sides, len(hand) - len(hold)) > max_exp_value:
            best_hold = hold
            max_exp_value = expected_value(hold, num_die_sides, len(hand) - len(hold))
    return (max_exp_value, best_hold)

##### TEST CODE #####

from poc_simpletest import TestSuite
import poc_holds_testsuite

def run_tests(score_function, exp_value_function):
    """
    Code to test score and expected value functions
    """
    
    # Create a test suite object
    suite = TestSuite()
    
    # Test score function on various inputs
    suite.run_test(score((1,)), 1, "Score Test #1:")
    suite.run_test(score((1, 1)), 2, "Score Test #2:")
    suite.run_test(score((1, 2)), 2, "Score Test #3:")
    suite.run_test(score((1, 1, 1, 2)), 3, "Score Test #4:")
    suite.run_test(score((1, 2, 1, 1)), 3, "Score Test #5:")
    suite.run_test(score((1, 1, 1, 2, 2)), 4, "Score Test #6:")
    suite.run_test(score((2, 6, 1, 4, 4, 5, 6)), 12, "Score Test #7:")
    
    # Test expected value function on various inputs
    suite.run_test(expected_value((), 1, 1), 1, "Expected Value Test #1:")
    suite.run_test(expected_value((1,), 1, 1), 2, "Expected Value Test #2:")
    suite.run_test(expected_value((), 6, 1), 3.5, "Expected Value Test #3:")
    suite.run_test(expected_value((), 2, 2), 2.5, "Expected Value Test #4:")
    suite.run_test(expected_value((1, 1, 1), 2, 1), 3.5, "Expected Value Test #5:")
    
    # Report results
    suite.report_results()

run_tests(score, expected_value)
poc_holds_testsuite.run_suite(gen_all_holds)
